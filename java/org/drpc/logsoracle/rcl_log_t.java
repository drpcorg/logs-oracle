// Generated by jextract

package org.drpc.logsoracle;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     uint64_t block_number;
 *     rcl_address_t address;
 *     rcl_hash_t topics[4];
 * };
 * }
 */
public class rcl_log_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("block_number"),
        MemoryLayout.sequenceLayout(20, Constants$root.C_CHAR$LAYOUT).withName("address"),
        MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT)).withName("topics"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return rcl_log_t.$struct$LAYOUT;
    }
    static final VarHandle block_number$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("block_number"));
    public static VarHandle block_number$VH() {
        return rcl_log_t.block_number$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t block_number;
     * }
     */
    public static long block_number$get(MemorySegment seg) {
        return (long)rcl_log_t.block_number$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t block_number;
     * }
     */
    public static void block_number$set(MemorySegment seg, long x) {
        rcl_log_t.block_number$VH.set(seg, x);
    }
    public static long block_number$get(MemorySegment seg, long index) {
        return (long)rcl_log_t.block_number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void block_number$set(MemorySegment seg, long index, long x) {
        rcl_log_t.block_number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment address$slice(MemorySegment seg) {
        return seg.asSlice(8, 20);
    }
    public static MemorySegment topics$slice(MemorySegment seg) {
        return seg.asSlice(28, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


