// Generated by jextract

package org.drpc.logsoracle;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     uint64_t from_block;
 *     uint64_t to_block;
 *     struct rcl_query_address address;
 *     struct rcl_query_topics topics[4];
 * };
 * }
 */
public class rcl_query_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("from_block"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("to_block"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("len"),
            Constants$root.C_POINTER$LAYOUT.withName("data")
        ).withName("address"),
        MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("len"),
            Constants$root.C_POINTER$LAYOUT.withName("data")
        ).withName("rcl_query_topics")).withName("topics")
    );
    public static MemoryLayout $LAYOUT() {
        return rcl_query_t.$struct$LAYOUT;
    }
    static final VarHandle from_block$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("from_block"));
    public static VarHandle from_block$VH() {
        return rcl_query_t.from_block$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t from_block;
     * }
     */
    public static long from_block$get(MemorySegment seg) {
        return (long)rcl_query_t.from_block$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t from_block;
     * }
     */
    public static void from_block$set(MemorySegment seg, long x) {
        rcl_query_t.from_block$VH.set(seg, x);
    }
    public static long from_block$get(MemorySegment seg, long index) {
        return (long)rcl_query_t.from_block$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void from_block$set(MemorySegment seg, long index, long x) {
        rcl_query_t.from_block$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle to_block$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("to_block"));
    public static VarHandle to_block$VH() {
        return rcl_query_t.to_block$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t to_block;
     * }
     */
    public static long to_block$get(MemorySegment seg) {
        return (long)rcl_query_t.to_block$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t to_block;
     * }
     */
    public static void to_block$set(MemorySegment seg, long x) {
        rcl_query_t.to_block$VH.set(seg, x);
    }
    public static long to_block$get(MemorySegment seg, long index) {
        return (long)rcl_query_t.to_block$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void to_block$set(MemorySegment seg, long index, long x) {
        rcl_query_t.to_block$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment address$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment topics$slice(MemorySegment seg) {
        return seg.asSlice(32, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


