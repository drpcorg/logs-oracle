// Generated by jextract

package org.drpc.logsoracle;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class liboracle_h  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum .HASH_LENGTH = 32;
     * }
     */
    public static int HASH_LENGTH() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .ADDRESS_LENGTH = 20;
     * }
     */
    public static int ADDRESS_LENGTH() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .TOPICS_LENGTH = 4;
     * }
     */
    public static int TOPICS_LENGTH() {
        return (int)4L;
    }
    public static MethodHandle rcl_new$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rcl_new$MH,"rcl_new");
    }
    /**
     * {@snippet :
     * rcl_t* rcl_new(char* dir, uint64_t ram_limit);
     * }
     */
    public static MemorySegment rcl_new(MemorySegment dir, long ram_limit) {
        var mh$ = rcl_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dir, ram_limit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcl_free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rcl_free$MH,"rcl_free");
    }
    /**
     * {@snippet :
     * void rcl_free(rcl_t* db);
     * }
     */
    public static void rcl_free(MemorySegment db) {
        var mh$ = rcl_free$MH();
        try {
            mh$.invokeExact(db);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcl_query$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rcl_query$MH,"rcl_query");
    }
    /**
     * {@snippet :
     * uint64_t rcl_query(rcl_t* db, rcl_query_t* query);
     * }
     */
    public static long rcl_query(MemorySegment db, MemorySegment query) {
        var mh$ = rcl_query$MH();
        try {
            return (long)mh$.invokeExact(db, query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcl_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rcl_insert$MH,"rcl_insert");
    }
    /**
     * {@snippet :
     * int rcl_insert(rcl_t* db, size_t size, rcl_log_t* logs);
     * }
     */
    public static int rcl_insert(MemorySegment db, long size, MemorySegment logs) {
        var mh$ = rcl_insert$MH();
        try {
            return (int)mh$.invokeExact(db, size, logs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcl_logs_count$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rcl_logs_count$MH,"rcl_logs_count");
    }
    /**
     * {@snippet :
     * uint64_t rcl_logs_count(rcl_t* db);
     * }
     */
    public static long rcl_logs_count(MemorySegment db) {
        var mh$ = rcl_logs_count$MH();
        try {
            return (long)mh$.invokeExact(db);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcl_blocks_count$MH() {
        return RuntimeHelper.requireNonNull(constants$0.rcl_blocks_count$MH,"rcl_blocks_count");
    }
    /**
     * {@snippet :
     * uint64_t rcl_blocks_count(rcl_t* db);
     * }
     */
    public static long rcl_blocks_count(MemorySegment db) {
        var mh$ = rcl_blocks_count$MH();
        try {
            return (long)mh$.invokeExact(db);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


