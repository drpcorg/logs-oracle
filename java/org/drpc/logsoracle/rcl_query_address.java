// Generated by jextract

package org.drpc.logsoracle;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rcl_query_address {
 *     size_t len;
 *     char** data;
 * };
 * }
 */
public class rcl_query_address {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("len"),
        Constants$root.C_POINTER$LAYOUT.withName("data")
    ).withName("rcl_query_address");
    public static MemoryLayout $LAYOUT() {
        return rcl_query_address.$struct$LAYOUT;
    }
    static final VarHandle len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("len"));
    public static VarHandle len$VH() {
        return rcl_query_address.len$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t len;
     * }
     */
    public static long len$get(MemorySegment seg) {
        return (long)rcl_query_address.len$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t len;
     * }
     */
    public static void len$set(MemorySegment seg, long x) {
        rcl_query_address.len$VH.set(seg, x);
    }
    public static long len$get(MemorySegment seg, long index) {
        return (long)rcl_query_address.len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void len$set(MemorySegment seg, long index, long x) {
        rcl_query_address.len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return rcl_query_address.data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)rcl_query_address.data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        rcl_query_address.data$VH.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)rcl_query_address.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        rcl_query_address.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


